# Trigger on changes to the "main" branch
trigger:
- main

# Trigger for PRs that target the "main" branch
pr:
- main

pool: tyger

variables:
  DOCKER_BUILDKIT: 1
  IS_PR: $[ne(variables['System.PullRequest.PullRequestId'], '')]
  IS_CI: $[or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI'))]

  DEVCONTAINER_IMAGE: compimagdevcontainers.azurecr.io/tyger@sha256:4daae2c3bea06bb309ccbc378ed461a6a03e9bc1013683eecec5d67b7cf66b60

jobs:
- job: buildAndTest
  displayName: "Deploy and run tests"
  timeoutInMinutes: 90
  container:
    image: $(DEVCONTAINER_IMAGE)
  variables:
    BASH_ENV: /opt/devcontainer/devcontainer.bashrc
    TYGER_ENVIRONMENT_CONFIG_DIR: $(Build.SourcesDirectory)/deploy/config/dev/ci # Disable scale-to-zero

  steps:

  - script: |
      # The AzureCLI@2 task needs to be able to execute the az command in the container, before running
      # our script, without activating the conda environment
      echo '##vso[task.prependpath]/opt/conda/envs/tyger/bin'

      # Determine the envionment name to use
      if [[ "${IS_PR}" == "True" ]]; then
        environment_name="tyger-pr${SYSTEM_PULLREQUEST_PULLREQUESTID}"
      else
        environment_name="tygerwestus2"
      fi

      echo "##vso[task.setvariable variable=TYGER_ENVIRONMENT_NAME]${environment_name}"

    displayName: Set variables

  - script: |
      set -euo pipefail

      if [[ "$(.devcontainer/get-devcontainer-image.sh)" != "${DEVCONTAINER_IMAGE}" ]]; then
        echo "The devcontainer image in azure-pipelines.yml and devcontainer.json must be the same"
      fi

      docker build -f .devcontainer/Dockerfile --target devcontainer -t devcontainer --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${DEVCONTAINER_IMAGE} .

      if ! .devcontainer/diff-container-images.sh "${DEVCONTAINER_IMAGE}" devcontainer; then
        echo 'Error: the "image" field in devcontainer.json does not reflect the current "devcontainer" target of the Dockerfile. Run .devcontainer/update-devcontainer-image.sh to correct this.'
        exit 1
      fi
    displayName: Verify devcontainer.json

  - script: |
      make restore
      make verify-format
    displayName: "Build and verify formatting"

  - task: AzureCLI@2
    displayName: Deploy and run tests
    inputs:
      azureSubscription: BiomedicalImaging-NonProd
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail
        make -s -j 8

  - task: AzureCLI@2
    condition: and(succeeded(), eq(variables.IS_CI, 'true'))
    displayName: Push Images
    inputs:
      azureSubscription: BiomedicalImaging-NonProd
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        make publish-cli-tools-image

  - task: AzureCLI@2
    condition: always()
    displayName: Cleanup
    inputs:
      azureSubscription: BiomedicalImaging-NonProd
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail

        scripts/get-context-environment-config.sh | deploy/scripts/environment/ensure-environment.sh -c - --fail-if-not-provisioned
        was_environment_provisioned_exit_code=$?

        # Point to scale-to-zero config
        export TYGER_ENVIRONMENT_CONFIG_DIR="${BUILD_SOURCESDIRECTORY}/deploy/config/dev/"

        if [[ "${AGENT_JOBSTATUS}" == "Succeeded" ]]; then
          if [[ "${IS_PR}" == "True" ]]; then
            echo "deleting environment"
            make remove-environment
            exit
          fi

          echo "scaling cluster back down"
          make ensure-environment
          exit
        fi

        if [ $was_environment_provisioned_exit_code -eq 0 ]; then
          echo "leaving environment as-is"
          exit
        fi

        echo "scaling cluster back down"
        make ensure-environment
