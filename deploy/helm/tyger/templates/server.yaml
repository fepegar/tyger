{{ $serverValues := index .Values "server" }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "tyger.fullname" . }}-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "tyger.fullname" . }}-server
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "tyger.fullname" . }}-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "tyger.fullname" . }}-server
subjects:
- kind: ServiceAccount
  name: {{ include "tyger.fullname" . }}-server
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tyger.fullname" . }}-server
data:
  appsettings.json: |-
    {
      "kubernetes": {
        "clusters":
          {{ $serverValues.clusterConfigurationJson }}
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tyger.fullname" . }}-server
spec:
  selector:
    matchLabels:
      component: {{ include "tyger.fullname" . }}-server
  replicas: {{ $serverValues.replicas }}
  strategy:
    type: Recreate # For inner-loop local development. TODO: parameterize
  template:
    metadata:
      labels:
        component: {{ include "tyger.fullname" . }}-server
    spec:
      initContainers:
        - name: check-db-ready
          image: jbergknoff/postgresql-client
          command:
            - 'sh'
            - '-c'
            - |
              until pg_isready -U {{ template "postgresql.username" .Subcharts.db }} -d {{ .Values.db.postgresqlDatabase }} -h {{ template "common.names.fullname" .Subcharts.db }} -p 5432; do
                echo waiting for database
                sleep 2
              done

      containers:
        - name: tyger
          image: "{{ $serverValues.image | default (printf "eminence.azurecr.io/tyger-server:%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ $serverValues.pullPolicy }}
          ports:
            - containerPort: 5000
          env:
            - name: ASPNETCORE_URLS
              value: http://+:5000
            - name: KeyPerFileDirectory
              value: /etc/secrets/
            - name: AppSettingsDirectory
              value: /etc/config/
            - name: Logging__Console__FormatterName
              value: Tyger.Server.Logging.LogFormatter
            - name: Auth__Enabled
              value: "{{ .Values.server.security.enabled }}"
          {{- if $serverValues.security.enabled }}
            - name: Auth__Authority
              value: {{ required "When server.security.enabled is true, a value for server.security.authority is required" $serverValues.security.authority }}
            - name: Auth__Audience
              value: {{ required "When server.security.enabled is true, a value for server.security.audience is required" $serverValues.security.audience }}
          {{- end }}
            - name: Kubernetes__Namespace
              value: {{ .Release.Namespace }}
            - name: Database__ConnectionString
              value: Host={{ template "common.names.fullname" .Subcharts.db }}; Database={{ .Values.db.postgresqlDatabase }}; Port=5432; Username={{ template "postgresql.username" .Subcharts.db }}
            - name: StorageServer__Uri
              value: http://{{ include "tyger.fullname" . }}-storage.{{ .Release.Namespace }}:8080
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 5000
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 5000
          volumeMounts:
          - name: secrets
            mountPath: /etc/secrets
            readOnly: true
          - name: config
            mountPath: /etc/config
            readOnly: true

      serviceAccount: {{ include "tyger.fullname" . }}-server
      {{- with $serverValues.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $serverValues.affinity }}
      affinity:fo
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $serverValues.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: secrets
        projected:
          sources:
          - secret:
              name: {{ template "common.names.fullname" .Subcharts.db  }}
              items:
              - key: postgresql-password
                path: database__password
          - secret:
              name: {{ required "A value for server.storageAccountConnectionStringSecretName" $serverValues.storageAccountConnectionStringSecretName }}
              items:
                - key: {{ $serverValues.storageAccountConnectionStringSecretDataKey }}
                  path: "blobStorage__connectionString"
          - secret:
              name: {{ required "A value for server.logsStorageAccountConnectionStringSecretName" $serverValues.logsStorageAccountConnectionStringSecretName }}
              items:
                - key: {{ $serverValues.logsStorageAccountConnectionStringSecretDataKey }}
                  path: "logarchive__storageAccountConnectionString"
      - name: config
        configMap:
          name: {{ include "tyger.fullname" . }}-server
---
kind: Service
apiVersion: v1
metadata:
  name: {{ include "tyger.fullname" . }}-server
spec:
  selector:
    component: {{ include "tyger.fullname" . }}-server
  ports:
    - name: tyger
      protocol: TCP
      port: 8080
      targetPort: 5000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ include "tyger.fullname" . }}-server
spec:
  {{- if $serverValues.tlsEnabled }}
  entryPoints:
  - websecure
  tls: {}
  {{- else }}
  entryPoints:
  - web
  {{- end }}
  routes:
  - kind: Rule
    match: Host(`{{ required "A value for server.hostname is required." $serverValues.hostname }}`)
    services:
    - name: {{ include "tyger.fullname" . }}-server
      port: 8080
