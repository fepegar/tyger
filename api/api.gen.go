// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Buffer defines model for Buffer.
type Buffer struct {
	// The buffer ID
	Id string `json:"id"`
}

// BufferAccess defines model for BufferAccess.
type BufferAccess struct {
	// The URI to read or write to the buffer
	Uri string `json:"uri"`
}

// BufferParameters defines model for BufferParameters.
type BufferParameters struct {
	Inputs  *[]string `json:"inputs,omitempty"`
	Outputs *[]string `json:"outputs,omitempty"`
}

// Codespec defines model for Codespec.
type Codespec struct {
	Args    *[]string         `json:"args,omitempty"`
	Buffers *BufferParameters `json:"buffers,omitempty"`
	Command *[]string         `json:"command,omitempty"`
	Env     *Codespec_Env     `json:"env,omitempty"`

	// The container image to run
	Image string `json:"image"`
}

// Codespec_Env defines model for Codespec.Env.
type Codespec_Env struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Error defines model for Error.
type Error struct {
	Error ErrorInfo `json:"error"`
}

// ErrorInfo defines model for ErrorInfo.
type ErrorInfo struct {
	// Error code
	Code string `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewRun defines model for NewRun.
type NewRun struct {
	// The buffers used in this reconstruction, specified as a mapping from name to id.
	Buffers *NewRun_Buffers `json:"buffers,omitempty"`

	// A reference to an existing codespec. Can be of the form "mycodespec" or "mycodespec/versions/6"
	Codespec string `json:"codespec"`
}

// The buffers used in this reconstruction, specified as a mapping from name to id.
type NewRun_Buffers struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Run defines model for Run.
type Run struct {
	// Embedded fields due to inline allOf schema
	// The run ID.
	Id string `json:"id"`

	// The status od the run.
	Status *string `json:"status,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/NewRun)
	NewRun `yaml:",inline"`
}

// CreateBufferJSONBody defines parameters for CreateBuffer.
type CreateBufferJSONBody interface{}

// GetBufferAccessUriParams defines parameters for GetBufferAccessUri.
type GetBufferAccessUriParams struct {
	// Whether the URI should grant write access to the buffer
	Writeable *bool `json:"writeable,omitempty"`
}

// UpsertCodespecJSONBody defines parameters for UpsertCodespec.
type UpsertCodespecJSONBody Codespec

// CreateRunJSONBody defines parameters for CreateRun.
type CreateRunJSONBody NewRun

// CreateBufferJSONRequestBody defines body for CreateBuffer for application/json ContentType.
type CreateBufferJSONRequestBody CreateBufferJSONBody

// UpsertCodespecJSONRequestBody defines body for UpsertCodespec for application/json ContentType.
type UpsertCodespecJSONRequestBody UpsertCodespecJSONBody

// CreateRunJSONRequestBody defines body for CreateRun for application/json ContentType.
type CreateRunJSONRequestBody CreateRunJSONBody

// Getter for additional properties for Codespec_Env. Returns the specified
// element and whether it was found
func (a Codespec_Env) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Codespec_Env
func (a *Codespec_Env) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Codespec_Env to handle AdditionalProperties
func (a *Codespec_Env) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Codespec_Env to handle AdditionalProperties
func (a Codespec_Env) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NewRun_Buffers. Returns the specified
// element and whether it was found
func (a NewRun_Buffers) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NewRun_Buffers
func (a *NewRun_Buffers) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NewRun_Buffers to handle AdditionalProperties
func (a *NewRun_Buffers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NewRun_Buffers to handle AdditionalProperties
func (a NewRun_Buffers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new buffer.
	// (POST /v1/buffers)
	CreateBuffer(w http.ResponseWriter, r *http.Request)
	// Returns a buffer by ID
	// (GET /v1/buffers/{id})
	GetBufferByID(w http.ResponseWriter, r *http.Request, id string)
	// Obtains a time-bound URI that allows read and optionally write access to the buffer
	// (POST /v1/buffers/{id}/access)
	GetBufferAccessUri(w http.ResponseWriter, r *http.Request, id string, params GetBufferAccessUriParams)
	// Get the latest version of a codespec
	// (GET /v1/codespecs/{name})
	GetLatestCodespec(w http.ResponseWriter, r *http.Request, name string)
	// Create or update a codespec
	// (PUT /v1/codespecs/{name})
	UpsertCodespec(w http.ResponseWriter, r *http.Request, name string)
	// Get a specific version of a codespec
	// (GET /v1/codespecs/{name}/versions/{version})
	GetCodespecVersion(w http.ResponseWriter, r *http.Request, name string, version int)
	// Creates and starts a new run.
	// (POST /v1/runs)
	CreateRun(w http.ResponseWriter, r *http.Request)
	// Get run
	// (GET /v1/runs/{id})
	GetRun(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateBuffer operation middleware
func (siw *ServerInterfaceWrapper) CreateBuffer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBuffer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetBufferByID operation middleware
func (siw *ServerInterfaceWrapper) GetBufferByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBufferByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetBufferAccessUri operation middleware
func (siw *ServerInterfaceWrapper) GetBufferAccessUri(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBufferAccessUriParams

	// ------------- Optional query parameter "writeable" -------------
	if paramValue := r.URL.Query().Get("writeable"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "writeable", r.URL.Query(), &params.Writeable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "writeable", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBufferAccessUri(w, r, id, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLatestCodespec operation middleware
func (siw *ServerInterfaceWrapper) GetLatestCodespec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLatestCodespec(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpsertCodespec operation middleware
func (siw *ServerInterfaceWrapper) UpsertCodespec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertCodespec(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCodespecVersion operation middleware
func (siw *ServerInterfaceWrapper) GetCodespecVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version int

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCodespecVersion(w, r, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/buffers", wrapper.CreateBuffer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/buffers/{id}", wrapper.GetBufferByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/buffers/{id}/access", wrapper.GetBufferAccessUri)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/codespecs/{name}", wrapper.GetLatestCodespec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/codespecs/{name}", wrapper.UpsertCodespec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/codespecs/{name}/versions/{version}", wrapper.GetCodespecVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/runs", wrapper.CreateRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/runs/{id}", wrapper.GetRun)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZzW4bOQx+FUG7wF6mdtIWe/CtSRdFgGJbBO3uIcmBHnFsFTOSKlFJDcPvvtDP2ON4",
	"/IemjbHoJZmMJJIiv4/kMHNe6sZohYocH825K6fYQHy88FWFNjwZqw1akhjfSxF+CnSllYakVnzEP02R",
	"jeN+dvWWF5xmBvmIO7JSTfhiUXCLX720KPjoJki4WxRZwZuyROc21Xgr+/V8vr5ipJlFEExb9mAlYXhB",
	"Sxt4wSttGyA+imL22RP2rAz6CBYaJLQ9RkllfHKUJGziwyPRS11gLczC39rTsYeCgZdaoDNYbhoBdnKk",
	"Ccktce/vFis+4r8NV3Ef5qAPN+6/KAI8GlDiOH2o7qOhQsgQOKg/rl1g23k9/oIlhReygQn2h7/UikAq",
	"tCxuilDwaj/mosQQ5b+s1T2wxvb1Lg/Fs1eq0hvy0/Gl/LhnQ0epRc+t4gEW1zrAlYpevdy8VsEbdK7X",
	"O0lOu7zPIVlfuz1Y/jc+XHu1aXYHPgeHdFt+cMw7FEwqRlPpmMVSK0fWl2FnwQLiZSVRMHAMWAPGSDVh",
	"ldUNU9DEcEsxuO0EfIWaskOZdf1vmMUKLaoySgDF8Jt0FES3hwbsEhQbI9NVTCUhEOyWN7N2wy0P6ab7",
	"ZniP1kmt3PDPW36Qw6N1wdXZz1DXHyo+ujk0x1qv2NXbQR8sHAF5138srTEt4s2sV4MDc/RuNmS8LO5i",
	"wpIZ8uvqL7Uiq2tmalDRqaystRcvxhBg4OREQc2M1aEISDWJhkmqg2WfZpOYy7OX+YifD84GZy+gNlOI",
	"mdWgAiP5iL8anA/OeMEN0DT6YHh/PuzA1mhHPbZZBMKAM4UPq9oRAgFhy5VYbrpoF4OP0NGFFrPEaEWo",
	"omwwppZlPDj84oKC+SJ51RmtXArsy7Pz/cdyFT4sXadqsX6xXIpbzbzgUwSRffFeJ23bq+vDFC126ukf",
	"jjVIIICAlYkkFslKvEfBi461e6puMrQCX9OTOSFl8x4feIXfDJaEgmHeU3DnmwbsbEvsB3FPBzrDuRSL",
	"YMEEe+BzjeStCiKyvxOmtWLAJLnUCa2D6R1SitrFLK6aTq9x81j+1ds2F2X5pFmFVE55IBsfRbTzgoe8",
	"GAqG4F0Kk/XYjc3jYNxtIPPsGZC5KPjrs9c/Hg2dBvUBHFOaWKW9EvyEILmJp1nAUB8mh7DqmntT24dx",
	"aJIYpG55CsSgrvWDS20zKMG0SXW8nuUWOonc6KS3ADi17Z8jz49C8ZOAt3is5d8p0jRQJKcwN9W+Fmxi",
	"QdHu+0Vjvnq0s5U18QCMa1zLbkucVFA7XKa3sdY1guql1FMn+/yx1IOttBLv/otcPeRKhAjkItngi3Gw",
	"73vJ0TKz7ezccB4AtL1ivEOK5+tQeojlxibwA5Z9aB/l3sf9l6sdOxkXwhF75cy7juQe5sVfp1I4llfc",
	"grLsuM6NDm5ssrNRtAOErmsGx7YxP41XrYWny6yDQL0ouPFbW/DwYeWNCE87iPDZOLQnxYIjPgWeiABL",
	"OOQP5Yz4x5YvnpGja4hNURXPR9SnrMFH3byMyH7Gm5/Wl1Y/xbdV0NVkZZ6fdhdVWPLh8KLaRvOfPF54",
	"3nxSzHcB6n5pY4+u1eJedVIRTmLncncCGYL/KqSPC+leILeMsV4dMtlSgjkCS+2gI8/++kZc117xH1PU",
	"2jlhf2CsV0dXs6fL6VsMC0Z9//jMevW/np31oquL0N0DtHdILvqpnU8HpKd/5mxk64TOvRk6DchPfkB2",
	"COp+ZnIMik86L9rksMV/AQAA//82z/AesB4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
