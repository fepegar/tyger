// Package e2e provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package e2e

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Buffer defines model for Buffer.
type Buffer struct {
	// The buffer ID
	Id string `json:"id"`
}

// BufferAccess defines model for BufferAccess.
type BufferAccess struct {
	// The URI to read or write to the buffer
	Uri string `json:"uri"`
}

// BufferParameter defines model for BufferParameter.
type BufferParameter struct {
	Name      string `json:"name"`
	Writeable *bool  `json:"writeable,omitempty"`
}

// Codespec defines model for Codespec.
type Codespec struct {
	Args             *[]string          `json:"args,omitempty"`
	BufferParameters *[]BufferParameter `json:"bufferParameters,omitempty"`
	Command          *[]string          `json:"command,omitempty"`
	Env              *Codespec_Env      `json:"env,omitempty"`

	// The container image to run
	Image string `json:"image"`
}

// Codespec_Env defines model for Codespec.Env.
type Codespec_Env struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Error defines model for Error.
type Error struct {
	Error ErrorInfo `json:"error"`
}

// ErrorInfo defines model for ErrorInfo.
type ErrorInfo struct {
	// Error code
	Code string `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewRun defines model for NewRun.
type NewRun struct {
	// The buffers used in this reconstruction, specified as a mapping from name to id.
	Buffers *NewRun_Buffers `json:"buffers,omitempty"`

	// A reference to an existing codespec. Can be of the form "mycodespec" or "mycodespec/versions/6"
	Codespec string `json:"codespec"`
}

// The buffers used in this reconstruction, specified as a mapping from name to id.
type NewRun_Buffers struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Run defines model for Run.
type Run struct {
	// Embedded fields due to inline allOf schema
	// The run ID.
	Id string `json:"id"`

	// The status od the run.
	Status *string `json:"status,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/NewRun)
	NewRun `yaml:",inline"`
}

// CreateBufferJSONBody defines parameters for CreateBuffer.
type CreateBufferJSONBody interface{}

// GetBufferAccessUriParams defines parameters for GetBufferAccessUri.
type GetBufferAccessUriParams struct {
	// Whether the URI should grant write access to the buffer
	Writeable *bool `json:"writeable,omitempty"`
}

// UpsertCodespecJSONBody defines parameters for UpsertCodespec.
type UpsertCodespecJSONBody Codespec

// CreateRunJSONBody defines parameters for CreateRun.
type CreateRunJSONBody NewRun

// CreateBufferJSONRequestBody defines body for CreateBuffer for application/json ContentType.
type CreateBufferJSONRequestBody CreateBufferJSONBody

// UpsertCodespecJSONRequestBody defines body for UpsertCodespec for application/json ContentType.
type UpsertCodespecJSONRequestBody UpsertCodespecJSONBody

// CreateRunJSONRequestBody defines body for CreateRun for application/json ContentType.
type CreateRunJSONRequestBody CreateRunJSONBody

// Getter for additional properties for Codespec_Env. Returns the specified
// element and whether it was found
func (a Codespec_Env) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Codespec_Env
func (a *Codespec_Env) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Codespec_Env to handle AdditionalProperties
func (a *Codespec_Env) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Codespec_Env to handle AdditionalProperties
func (a Codespec_Env) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NewRun_Buffers. Returns the specified
// element and whether it was found
func (a NewRun_Buffers) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NewRun_Buffers
func (a *NewRun_Buffers) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NewRun_Buffers to handle AdditionalProperties
func (a *NewRun_Buffers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NewRun_Buffers to handle AdditionalProperties
func (a NewRun_Buffers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateBuffer request with any body
	CreateBufferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBuffer(ctx context.Context, body CreateBufferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBufferByID request
	GetBufferByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBufferAccessUri request
	GetBufferAccessUri(ctx context.Context, id string, params *GetBufferAccessUriParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestCodespec request
	GetLatestCodespec(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertCodespec request with any body
	UpsertCodespecWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertCodespec(ctx context.Context, name string, body UpsertCodespecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCodespecVersion request
	GetCodespecVersion(ctx context.Context, name string, version int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRun request with any body
	CreateRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRun(ctx context.Context, body CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRun request
	GetRun(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateBufferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBufferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBuffer(ctx context.Context, body CreateBufferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBufferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBufferByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBufferByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBufferAccessUri(ctx context.Context, id string, params *GetBufferAccessUriParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBufferAccessUriRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestCodespec(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestCodespecRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertCodespecWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertCodespecRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertCodespec(ctx context.Context, name string, body UpsertCodespecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertCodespecRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCodespecVersion(ctx context.Context, name string, version int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCodespecVersionRequest(c.Server, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRun(ctx context.Context, body CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRun(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateBufferRequest calls the generic CreateBuffer builder with application/json body
func NewCreateBufferRequest(server string, body CreateBufferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBufferRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBufferRequestWithBody generates requests for CreateBuffer with any type of body
func NewCreateBufferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buffers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBufferByIDRequest generates requests for GetBufferByID
func NewGetBufferByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buffers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBufferAccessUriRequest generates requests for GetBufferAccessUri
func NewGetBufferAccessUriRequest(server string, id string, params *GetBufferAccessUriParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buffers/%s/access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Writeable != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "writeable", runtime.ParamLocationQuery, *params.Writeable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestCodespecRequest generates requests for GetLatestCodespec
func NewGetLatestCodespecRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/codespecs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertCodespecRequest calls the generic UpsertCodespec builder with application/json body
func NewUpsertCodespecRequest(server string, name string, body UpsertCodespecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertCodespecRequestWithBody(server, name, "application/json", bodyReader)
}

// NewUpsertCodespecRequestWithBody generates requests for UpsertCodespec with any type of body
func NewUpsertCodespecRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/codespecs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCodespecVersionRequest generates requests for GetCodespecVersion
func NewGetCodespecVersionRequest(server string, name string, version int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/codespecs/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunRequest calls the generic CreateRun builder with application/json body
func NewCreateRunRequest(server string, body CreateRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRunRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRunRequestWithBody generates requests for CreateRun with any type of body
func NewCreateRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRunRequest generates requests for GetRun
func NewGetRunRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/runs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateBuffer request with any body
	CreateBufferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBufferResponse, error)

	CreateBufferWithResponse(ctx context.Context, body CreateBufferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBufferResponse, error)

	// GetBufferByID request
	GetBufferByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBufferByIDResponse, error)

	// GetBufferAccessUri request
	GetBufferAccessUriWithResponse(ctx context.Context, id string, params *GetBufferAccessUriParams, reqEditors ...RequestEditorFn) (*GetBufferAccessUriResponse, error)

	// GetLatestCodespec request
	GetLatestCodespecWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetLatestCodespecResponse, error)

	// UpsertCodespec request with any body
	UpsertCodespecWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertCodespecResponse, error)

	UpsertCodespecWithResponse(ctx context.Context, name string, body UpsertCodespecJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertCodespecResponse, error)

	// GetCodespecVersion request
	GetCodespecVersionWithResponse(ctx context.Context, name string, version int, reqEditors ...RequestEditorFn) (*GetCodespecVersionResponse, error)

	// CreateRun request with any body
	CreateRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunResponse, error)

	CreateRunWithResponse(ctx context.Context, body CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunResponse, error)

	// GetRun request
	GetRunWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRunResponse, error)
}

type CreateBufferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Buffer
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateBufferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBufferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBufferByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Buffer
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetBufferByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBufferByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBufferAccessUriResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BufferAccess
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetBufferAccessUriResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBufferAccessUriResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestCodespecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Codespec
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetLatestCodespecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestCodespecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertCodespecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Codespec
	JSON201      *Codespec
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpsertCodespecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertCodespecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCodespecVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Codespec
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCodespecVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCodespecVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Run
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Run
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateBufferWithBodyWithResponse request with arbitrary body returning *CreateBufferResponse
func (c *ClientWithResponses) CreateBufferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBufferResponse, error) {
	rsp, err := c.CreateBufferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBufferResponse(rsp)
}

func (c *ClientWithResponses) CreateBufferWithResponse(ctx context.Context, body CreateBufferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBufferResponse, error) {
	rsp, err := c.CreateBuffer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBufferResponse(rsp)
}

// GetBufferByIDWithResponse request returning *GetBufferByIDResponse
func (c *ClientWithResponses) GetBufferByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBufferByIDResponse, error) {
	rsp, err := c.GetBufferByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBufferByIDResponse(rsp)
}

// GetBufferAccessUriWithResponse request returning *GetBufferAccessUriResponse
func (c *ClientWithResponses) GetBufferAccessUriWithResponse(ctx context.Context, id string, params *GetBufferAccessUriParams, reqEditors ...RequestEditorFn) (*GetBufferAccessUriResponse, error) {
	rsp, err := c.GetBufferAccessUri(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBufferAccessUriResponse(rsp)
}

// GetLatestCodespecWithResponse request returning *GetLatestCodespecResponse
func (c *ClientWithResponses) GetLatestCodespecWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetLatestCodespecResponse, error) {
	rsp, err := c.GetLatestCodespec(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestCodespecResponse(rsp)
}

// UpsertCodespecWithBodyWithResponse request with arbitrary body returning *UpsertCodespecResponse
func (c *ClientWithResponses) UpsertCodespecWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertCodespecResponse, error) {
	rsp, err := c.UpsertCodespecWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertCodespecResponse(rsp)
}

func (c *ClientWithResponses) UpsertCodespecWithResponse(ctx context.Context, name string, body UpsertCodespecJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertCodespecResponse, error) {
	rsp, err := c.UpsertCodespec(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertCodespecResponse(rsp)
}

// GetCodespecVersionWithResponse request returning *GetCodespecVersionResponse
func (c *ClientWithResponses) GetCodespecVersionWithResponse(ctx context.Context, name string, version int, reqEditors ...RequestEditorFn) (*GetCodespecVersionResponse, error) {
	rsp, err := c.GetCodespecVersion(ctx, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCodespecVersionResponse(rsp)
}

// CreateRunWithBodyWithResponse request with arbitrary body returning *CreateRunResponse
func (c *ClientWithResponses) CreateRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunResponse, error) {
	rsp, err := c.CreateRunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunResponse(rsp)
}

func (c *ClientWithResponses) CreateRunWithResponse(ctx context.Context, body CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunResponse, error) {
	rsp, err := c.CreateRun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunResponse(rsp)
}

// GetRunWithResponse request returning *GetRunResponse
func (c *ClientWithResponses) GetRunWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRunResponse, error) {
	rsp, err := c.GetRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunResponse(rsp)
}

// ParseCreateBufferResponse parses an HTTP response from a CreateBufferWithResponse call
func ParseCreateBufferResponse(rsp *http.Response) (*CreateBufferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBufferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Buffer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBufferByIDResponse parses an HTTP response from a GetBufferByIDWithResponse call
func ParseGetBufferByIDResponse(rsp *http.Response) (*GetBufferByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBufferByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Buffer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBufferAccessUriResponse parses an HTTP response from a GetBufferAccessUriWithResponse call
func ParseGetBufferAccessUriResponse(rsp *http.Response) (*GetBufferAccessUriResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBufferAccessUriResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BufferAccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLatestCodespecResponse parses an HTTP response from a GetLatestCodespecWithResponse call
func ParseGetLatestCodespecResponse(rsp *http.Response) (*GetLatestCodespecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestCodespecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Codespec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpsertCodespecResponse parses an HTTP response from a UpsertCodespecWithResponse call
func ParseUpsertCodespecResponse(rsp *http.Response) (*UpsertCodespecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertCodespecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Codespec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Codespec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCodespecVersionResponse parses an HTTP response from a GetCodespecVersionWithResponse call
func ParseGetCodespecVersionResponse(rsp *http.Response) (*GetCodespecVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCodespecVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Codespec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateRunResponse parses an HTTP response from a CreateRunWithResponse call
func ParseCreateRunResponse(rsp *http.Response) (*CreateRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Run
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRunResponse parses an HTTP response from a GetRunWithResponse call
func ParseGetRunResponse(rsp *http.Response) (*GetRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Run
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
